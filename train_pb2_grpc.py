# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import train_pb2 as train__pb2


class ServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTrainStatus = channel.unary_unary(
                '/Server/GetTrainStatus',
                request_serializer=train__pb2.TrainStatusRequest.SerializeToString,
                response_deserializer=train__pb2.TrainStatusResponse.FromString,
                )
        self.UpdateTrainStatus = channel.unary_unary(
                '/Server/UpdateTrainStatus',
                request_serializer=train__pb2.TrainUpdateRequest.SerializeToString,
                response_deserializer=train__pb2.TrainUpdateResponse.FromString,
                )
        self.GetOtherTrainStatus = channel.unary_unary(
                '/Server/GetOtherTrainStatus',
                request_serializer=train__pb2.OtherTrainStatusRequest.SerializeToString,
                response_deserializer=train__pb2.TrainStatusResponse.FromString,
                )
        self.SendData = channel.unary_unary(
                '/Server/SendData',
                request_serializer=train__pb2.MessageRequest.SerializeToString,
                response_deserializer=train__pb2.Empty.FromString,
                )


class ServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetTrainStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTrainStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOtherTrainStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendData(self, request, context):
        """alarmSensor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTrainStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrainStatus,
                    request_deserializer=train__pb2.TrainStatusRequest.FromString,
                    response_serializer=train__pb2.TrainStatusResponse.SerializeToString,
            ),
            'UpdateTrainStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTrainStatus,
                    request_deserializer=train__pb2.TrainUpdateRequest.FromString,
                    response_serializer=train__pb2.TrainUpdateResponse.SerializeToString,
            ),
            'GetOtherTrainStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOtherTrainStatus,
                    request_deserializer=train__pb2.OtherTrainStatusRequest.FromString,
                    response_serializer=train__pb2.TrainStatusResponse.SerializeToString,
            ),
            'SendData': grpc.unary_unary_rpc_method_handler(
                    servicer.SendData,
                    request_deserializer=train__pb2.MessageRequest.FromString,
                    response_serializer=train__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Server(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetTrainStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server/GetTrainStatus',
            train__pb2.TrainStatusRequest.SerializeToString,
            train__pb2.TrainStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTrainStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server/UpdateTrainStatus',
            train__pb2.TrainUpdateRequest.SerializeToString,
            train__pb2.TrainUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOtherTrainStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server/GetOtherTrainStatus',
            train__pb2.OtherTrainStatusRequest.SerializeToString,
            train__pb2.TrainStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server/SendData',
            train__pb2.MessageRequest.SerializeToString,
            train__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
